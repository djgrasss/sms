/*
 * ReportDayBook.java
 *
 * Created on June 26, 2010, 2:24 PM
 */
package bankingapp;

import bankingapp.utils.ExcelExporter;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.File;
import java.io.IOException;
import java.text.MessageFormat;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.swing.JFileChooser;
import javax.swing.JTable.PrintMode;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.application.Action;

/**
 *
 * @author  s
 */
public class ReportDayBook extends javax.swing.JInternalFrame {

    private EntityManager BankingPUEntityManager;

    /** Creates new form ReportDayBook */
    public ReportDayBook() {
        initComponents();
        BankingPUEntityManager = javax.persistence.Persistence.createEntityManagerFactory("BankingAppPU").createEntityManager();
        jTable1.setVisible(true);

    }

    private void populateTable(String dd) {
        //String dd = "2010-07-16";
        String[] columns = {"Member", "Member Id", "Reciepts", "Payments", "Date", "Category"};
        String sql = "(SELECT members.username as username,members.number as member_number ,transactions.deposit as deposit,transactions.withdrawal as withdrawal,DATE_FORMAT(transactions.`timestamp`,'%d-%b-%Y') as timestampdate,ledger_heads.ledger_head as ledgerhead FROM `banking`.`transactions` inner join ledger_heads on ledger_heads.id = transactions.lledger_head_id inner join members on members.id = transactions.user_id where `timestamp` like '" + dd + " %') union (SELECT 'Total' as username,'' as member_number,sum(deposit) as deposit,sum(withdrawal) as withdrawal,'' as timestampdate,ledger_heads.ledger_head as ledger_head FROM `banking`.`transactions` inner join ledger_heads on ledger_heads.id = transactions.lledger_head_id where `timestamp` like '" + dd + " %' group by ledger_heads.ledger_head) order by ledgerhead,timestampdate desc";
        System.out.println(sql);
        Query q = BankingPUEntityManager.createNativeQuery(sql);
        List l = q.getResultList();
        String[][] data = new String[l.size()][6];
        int i = 0;
        for (Iterator it = l.iterator(); it.hasNext();) {
            Object object = it.next();
            Vector v = (Vector) object;
            data[i][0] = (String) v.get(0);
            data[i][1] = (String) v.get(1);
            data[i][2] = ((Double) v.get(2)) == null ? "" : ((Double) v.get(2)).toString();
            data[i][3] = ((Double) v.get(3)) == null ? "" : ((Double) v.get(3)).toString();

            data[i][4] = (v.get(4)).toString();
            data[i][5] = (String) v.get(5);
            i++;
        }
        DefaultTableModel dtm = new DefaultTableModel(data, columns);
        jTable1.setModel(dtm);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        saveFileChooser = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        dateSpinner = new javax.swing.JSpinner();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        openingBalanceLabel = new javax.swing.JLabel();
        closingBalanceLabel = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();

        saveFileChooser.setName("saveFileChooser"); // NOI18N

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(bankingapp.BankingApp.class).getContext().getResourceMap(ReportDayBook.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        jLabel1.setName("jLabel1"); // NOI18N

        dateSpinner.setModel(new javax.swing.SpinnerDateModel());
        dateSpinner.setEditor(new javax.swing.JSpinner.DateEditor(dateSpinner, "dd-MM-yyyy"));
        dateSpinner.setName("dateSpinner"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(bankingapp.BankingApp.class).getContext().getActionMap(ReportDayBook.class, this);
        jButton1.setAction(actionMap.get("showTable")); // NOI18N
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setName("jTable1"); // NOI18N
        jScrollPane1.setViewportView(jTable1);

        jButton2.setAction(actionMap.get("printTable")); // NOI18N
        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N

        openingBalanceLabel.setName("openingBalanceLabel"); // NOI18N

        closingBalanceLabel.setName("closingBalanceLabel"); // NOI18N

        jButton3.setAction(actionMap.get("exportToExcel")); // NOI18N
        jButton3.setText(resourceMap.getString("jButton3.text")); // NOI18N
        jButton3.setName("jButton3"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 731, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(openingBalanceLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 301, Short.MAX_VALUE)
                        .addComponent(closingBalanceLabel)
                        .addGap(214, 214, 214))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton3)
                            .addComponent(jButton2))
                        .addGap(63, 63, 63))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jButton3)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(dateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(openingBalanceLabel)
                    .addComponent(closingBalanceLabel)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    @Action
    public void showTable() {
        jTable1.setVisible(true);
        java.util.Date s = (java.util.Date) dateSpinner.getValue();
        String dateString = (s.getYear() + 1900) + "-" + ((s.getMonth() < 9) ? "0" + (s.getMonth() + 1) : (s.getMonth() + 1)) + "-" +  ((s.getDate() < 10) ? "0" + (s.getDate() ) : (s.getDate() ));
        populateTable(dateString);
        String openingBalanceQuery = "select round(ifnull(sum(deposit),0)-ifnull(sum(withdrawal),0),2) from transactions where `timestamp` < '" + dateString + "'";
        System.out.println("openingBalanceQuery " + openingBalanceQuery);
        Query q1 = BankingPUEntityManager.createNativeQuery(openingBalanceQuery);
        openingBalanceLabel.setText("Opening balance : " + ((Vector) q1.getSingleResult()).get(0).toString());
        String closingBalanceQuery = "select round(ifnull(sum(deposit),0)-ifnull(sum(withdrawal),0),2) from transactions where `timestamp` < DATE_ADD('" + dateString + "', INTERVAL 1 DAY)";
        Query q2 = BankingPUEntityManager.createNativeQuery(closingBalanceQuery);
        closingBalanceLabel.setText("Closing balance : " + ((Vector) q2.getSingleResult()).get(0).toString());
        System.out.println("Closing balance qry " + closingBalanceQuery);
    //System.out.println(dateString);
    }

    @Action
    public void printTable() {
        try {
            /*
            jTable1.print();                                        
             */
            org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(bankingapp.BankingApp.class).getContext().getResourceMap(ReportCashBook.class);
            //jTable1.print(PrintMode.FIT_WIDTH,new MessageFormat(resourceMap.getString("print.first")+"-{0}-"+resourceMap.getString("print.second")+resourceMap.getString("print.third")),null);
            
            java.util.Date s = (java.util.Date) dateSpinner.getValue();
            String dateString = (s.getYear() + 1900) + "-" + ((s.getMonth() < 9) ? "0" + (s.getMonth() + 1) : (s.getMonth() + 1)) + "-" +((s.getDate() < 10) ? "0" + (s.getDate() ) : (s.getDate() ));
            String openingBalanceQuery = "select round(ifnull(sum(deposit),0)-ifnull(sum(withdrawal),0),2) from transactions where `timestamp` < '" + dateString + "'";
            System.out.println("openingBalanceQuery " + openingBalanceQuery);
            Query q1 = BankingPUEntityManager.createNativeQuery(openingBalanceQuery);
            String balString = ("Opening balance :" + ((Vector) q1.getSingleResult()).get(0).toString());
            String closingBalanceQuery = "select round(ifnull(sum(deposit),0)-ifnull(sum(withdrawal),0),2) from transactions where `timestamp` < DATE_ADD('" + dateString + "', INTERVAL 1 DAY)";
            Query q2 = BankingPUEntityManager.createNativeQuery(closingBalanceQuery);
            balString+=("   Closing balance : " + ((Vector) q2.getSingleResult()).get(0).toString());
            System.out.println("Closing balance qry " + closingBalanceQuery);
            
            PrinterJob job = PrinterJob.getPrinterJob();
            MessageFormat[] header = new MessageFormat[8];
            header[0] = new MessageFormat("");
            header[1] = new MessageFormat("                      " + resourceMap.getString("print.first"));
            header[2] = new MessageFormat("                      " + resourceMap.getString("print.second"));
            header[3] = new MessageFormat("                      " + resourceMap.getString("print.third"));
            header[4] = new MessageFormat("");

            header[5] = new MessageFormat("                                    DAY BOOK - "+ ((java.util.Date)dateSpinner.getValue()).toLocaleString());
            header[6] = new MessageFormat("");
            header[7] = new MessageFormat(balString);
            MessageFormat[] footer = new MessageFormat[1];
            footer[0] = new MessageFormat("--{0}--");
            job.setPrintable(new MyTablePrintable(jTable1, PrintMode.FIT_WIDTH, header, footer));
            job.print();
            
        } catch (PrinterException ex) {
            Logger.getLogger(ReportCashBook.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Action
    public void exportToExcel() {
        try {
            
            if (saveFileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                File f = saveFileChooser.getSelectedFile();
                ExcelExporter ee = new ExcelExporter();
                ee.exportTable(jTable1, f);
            }
        } catch (IOException ex) {
            Logger.getLogger(ReportCashBook.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel closingBalanceLabel;
    private javax.swing.JSpinner dateSpinner;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel openingBalanceLabel;
    private javax.swing.JFileChooser saveFileChooser;
    // End of variables declaration//GEN-END:variables
}

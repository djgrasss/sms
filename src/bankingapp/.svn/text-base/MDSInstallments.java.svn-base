/*
 * MDSInstallments.java
 *
 * Created on July 12, 2010, 7:43 PM
 */
package bankingapp;

import bankingapp.Accounts;
import bankingapp.Accounts;
import java.beans.PropertyVetoException;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import javax.persistence.Query;
import javax.persistence.EntityManager;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author  s
 */
public class MDSInstallments extends javax.swing.JInternalFrame {

    int mdsSchemeId;
    private EntityManager BankingPUEntityManager;
    private UserMds currentUserMds;
    private boolean fromSuspense = false;

    /** Creates new form MDSInstallments */
    public MDSInstallments() {
        initComponents();
        BankingPUEntityManager = javax.persistence.Persistence.createEntityManagerFactory("BankingAppPU").createEntityManager();
        Query schemeId = BankingPUEntityManager.createQuery("SELECT s.id from Schemes s where s.scheme = 'mds'");
        Integer id = (Integer) schemeId.getSingleResult();
        mdsSchemeId = id;
        ActivityByMember am = ActivityByMember.getInstance();
        if (am != null) {
            Members m = am.getMember();
            if (m != null) {
                pkText.setText(m.getUsername());
                pkTextKeyReleased1(null);
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        criteriaCombo = new javax.swing.JComboBox();
        pkText = new javax.swing.JTextField();
        detailsLabel = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        installmentText = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        amountText = new javax.swing.JTextField();
        mdsNameLabel = new javax.swing.JLabel();
        installmentDateText = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        interestText = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        suspanceButton = new javax.swing.JButton();

        setClosable(true);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(bankingapp.BankingApp.class).getContext().getResourceMap(MDSInstallments.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        criteriaCombo.setBackground(resourceMap.getColor("criteriaCombo.background")); // NOI18N
        criteriaCombo.setFont(resourceMap.getFont("jComboBox1.font")); // NOI18N
        criteriaCombo.setModel(new DefaultComboBoxModel(UserTypeComboItem.constructMenuItem()));
        criteriaCombo.setName("criteriaCombo"); // NOI18N

        pkText.setBackground(resourceMap.getColor("pkText.background")); // NOI18N
        pkText.setFont(resourceMap.getFont("pkText.font")); // NOI18N
        pkText.setName("pkText"); // NOI18N
        pkText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                pkTextKeyReleased(evt);
                pkTextKeyReleased1(evt);
            }
        });

        detailsLabel.setName("detailsLabel"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(bankingapp.BankingApp.class).getContext().getActionMap(MDSInstallments.class, this);
        jButton1.setAction(actionMap.get("makePayment")); // NOI18N
        jButton1.setBackground(resourceMap.getColor("jButton1.background")); // NOI18N
        jButton1.setFont(resourceMap.getFont("jButton1.font")); // NOI18N
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setBackground(resourceMap.getColor("jLabel1.background")); // NOI18N
        jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jComboBox1.setBackground(resourceMap.getColor("jComboBox1.background")); // NOI18N
        jComboBox1.setFont(resourceMap.getFont("jComboBox1.font")); // NOI18N
        jComboBox1.setName("jComboBox1"); // NOI18N
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel2.setBackground(resourceMap.getColor("jLabel2.background")); // NOI18N
        jLabel2.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        installmentText.setBackground(resourceMap.getColor("installmentText.background")); // NOI18N
        installmentText.setEditable(false);
        installmentText.setFont(resourceMap.getFont("pkText.font")); // NOI18N
        installmentText.setText(resourceMap.getString("installmentText.text")); // NOI18N
        installmentText.setName("installmentText"); // NOI18N

        jLabel3.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        amountText.setFont(resourceMap.getFont("pkText.font")); // NOI18N
        amountText.setText(resourceMap.getString("amountText.text")); // NOI18N
        amountText.setName("amountText"); // NOI18N

        mdsNameLabel.setText(resourceMap.getString("mdsNameLabel.text")); // NOI18N
        mdsNameLabel.setName("mdsNameLabel"); // NOI18N

        installmentDateText.setText(resourceMap.getString("installmentDateText.text")); // NOI18N
        installmentDateText.setName("installmentDateText"); // NOI18N

        jLabel4.setName("jLabel4"); // NOI18N

        interestText.setFont(resourceMap.getFont("pkText.font")); // NOI18N
        interestText.setName("interestText"); // NOI18N

        jLabel5.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        suspanceButton.setText(resourceMap.getString("suspanceButton.text")); // NOI18N
        suspanceButton.setName("suspanceButton"); // NOI18N
        suspanceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suspanceButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5))
                    .addComponent(jLabel3)
                    .addComponent(criteriaCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pkText, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(mdsNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(6, 6, 6)
                        .addComponent(detailsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(installmentText, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(installmentDateText))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(interestText, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(amountText, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE))
                        .addGap(27, 27, 27)
                        .addComponent(suspanceButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(criteriaCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pkText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(mdsNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(detailsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(installmentText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(installmentDateText))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(amountText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(suspanceButton))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addGap(15, 15, 15))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(interestText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(41, 41, 41))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void pkTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pkTextKeyReleased
    // TODO add your handling code here:
    }//GEN-LAST:event_pkTextKeyReleased

    List getUser() {
        Query q = BankingPUEntityManager.createQuery("SELECT m  FROM Members m where m." + ((UserTypeComboItem) criteriaCombo.getSelectedItem()).getColumn() + " = '" + pkText.getText().trim() + "'");
        List l = q.getResultList();
        return l;
    }

    private void pkTextKeyReleased1(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pkTextKeyReleased1
        List l = getUser();
        Members m = null;
        if (l.size() != 0) {
            jButton1.setEnabled(true);
            m = (Members) l.get(0);
            detailsLabel.setText("<html>Username :" + m.getUsername() + " <br /> Membership No. :" + m.getNumber() + " </html>");
            List<Accounts> l1;
            String sql = "SELECT a FROM Accounts a WHERE a.memberId=" + m.getId() + " AND a.schemeId = " + mdsSchemeId + " AND a.closed=0";
            //System.out.println(sql);
            Query q = BankingPUEntityManager.createQuery(sql);
            l1 = q.getResultList();
            //jComboBox1.removeAllItems();
            DefaultComboBoxModel dcbm = new DefaultComboBoxModel(l1.toArray());
            jComboBox1.setModel(dcbm);
            jComboBox1ActionPerformed(null);
        } else {
            jButton1.setEnabled(false);
        }
    }//GEN-LAST:event_pkTextKeyReleased1

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        List l = getUser();
        Members m = null;
        if (l.size() != 0) {
            m = (Members) l.get(0);
        }
        Accounts a = (Accounts) jComboBox1.getSelectedItem();
        String displayMdsNameSql = "select mds.name from accounts inner join user_mds on accounts.id = user_mds.accounts_id inner join mds on user_mds.mds_id = mds.id where accounts.id = " + a.getId();
        Query displayMdsQuery = BankingPUEntityManager.createNativeQuery(displayMdsNameSql);
        String mdsName = (String) ((Vector) displayMdsQuery.getSingleResult()).get(0);
        mdsNameLabel.setText(mdsName);
        String sql = "SELECT u FROM UserMds u WHERE u.accountsId=" + a.getId();
        System.out.println(sql);
        Query q = BankingPUEntityManager.createQuery(sql);
        UserMds umds = (UserMds) q.getSingleResult();
        currentUserMds = umds;
        String nativeSql = "select max(installment) from user_mds inner join mds_payments on mds_payments.user_mds_id = user_mds.id inner join mds_details on mds_payments.mds_details_id = mds_details.id where mds_payments.user_mds_id =" + umds.getId();
        Query nativeQuery = BankingPUEntityManager.createNativeQuery(nativeSql);
        Integer installment = (Integer) ((Vector) nativeQuery.getSingleResult()).get(0);
        installment = installment == null ? 0 : installment;
        installmentText.setText(installment + 1 + "");
        String mdsdetailsql = "select installmentAmount from mds_details where mds_id = " + umds.getMdsId() + " and installment=" + installmentText.getText();
        System.out.println(mdsdetailsql);
        Query mdsdetailsquery = BankingPUEntityManager.createNativeQuery(mdsdetailsql);
        Double amount = (Double) ((Vector) mdsdetailsquery.getSingleResult()).get(0);
        amountText.setText(amount.toString());
        Date commencement = a.getCommencement();
        Calendar cal = Calendar.getInstance();
        cal.setTime(commencement);
        cal.add(Calendar.MONTH, installment);
        installmentDateText.setText("on " + cal.getTime().toString());
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        List l = getUser();
        Members m = null;
        if (l.size() != 0) {
            m = (Members) l.get(0);
        }
        Accounts a = (Accounts) jComboBox1.getSelectedItem();
        Transactions t = new Transactions();
        t.setAccountId((a).getId());
        t.setDeposit(Double.parseDouble(amountText.getText().trim()));
        t.setLledgerHeadId(Utils.getLedgerHead("mds").getId());
        t.setUserId(m.getId());
        BankingPUEntityManager.getTransaction().begin();
        BankingPUEntityManager.persist(t);
        BankingPUEntityManager.getTransaction().commit();
        String mdsDetailsQuery = "SELECT m FROM MdsDetails m WHERE m.mdsId=" + currentUserMds.getMdsId() + " AND m.installment=" + Integer.parseInt(installmentText.getText());
        System.out.println(mdsDetailsQuery);
        Query getMdsDetaisl = BankingPUEntityManager.createQuery(mdsDetailsQuery);
        MdsDetails mdsd = (MdsDetails) getMdsDetaisl.getSingleResult();
        MdsPayments payments = new MdsPayments();
        payments.setTransactionsId(Utils.getMaxId("transactions"));
        payments.setMdsDetailsId(mdsd.getId());
        payments.setUserMdsId(currentUserMds.getId());
        BankingPUEntityManager.getTransaction().begin();
        BankingPUEntityManager.persist(payments);
        BankingPUEntityManager.getTransaction().commit();
        String mdsMaxInstallmentSql = "SELECT max(m.installment) FROM MdsDetails m WHERE m.mdsId = " + mdsd.getMdsId();
        Query mdsMaxInstallmentQuery = BankingPUEntityManager.createQuery(mdsMaxInstallmentSql);
        Integer maxInstallment = (Integer) mdsMaxInstallmentQuery.getSingleResult();
        JOptionPane.showMessageDialog(this, "Payment has been made");
        if (Integer.parseInt(installmentText.getText().trim()) >= maxInstallment) {
            String closeAccountSql = "UPDATE Accounts a SET a.closed=1 where a.id = " + a.getId();
            Query closeAccountQuery = BankingPUEntityManager.createQuery(closeAccountSql);
            BankingPUEntityManager.getTransaction().begin();
            closeAccountQuery.executeUpdate();
            BankingPUEntityManager.getTransaction().commit();
            JOptionPane.showMessageDialog(this, "All the installments paid. Account closed");
        }
        int resp = JOptionPane.showConfirmDialog(this, "Do you want to add this to print ?");
        if (resp == JOptionPane.YES_OPTION) {
            String[] p = {"MDS Installment-" + installmentText.getText(), amountText.getText().trim()};
            PrintDemon.getInstance().reciepts.add(p);
            String[] q = {"Interest ", interestText.getText().trim()};
            PrintDemon.getInstance().reciepts.add(q);
        }
        // suspance stuff
        if (fromSuspense) {
            Transactions t1 = new Transactions();
            try {
                List l1 = getUser();
                Members m1 = null;
                if (l1.size() != 0) {
                    m1 = (Members) l1.get(0);
                }
                t1.setWithdrawal(Double.parseDouble(amountText.getText().trim()));
                t1.setUserId(m1.getId());
                LedgerHeads lh = Utils.getLedgerHead("Suspense Account");
                t1.setLledgerHeadId(lh.getId());
                BankingPUEntityManager.getTransaction().begin();
                BankingPUEntityManager.persist(t1);
                BankingPUEntityManager.getTransaction().commit();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        try {
            this.setClosed(true);
        } catch (PropertyVetoException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void suspanceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suspanceButtonActionPerformed
        // TODO add your handling code here:
        suspanceProcess();
}//GEN-LAST:event_suspanceButtonActionPerformed
void suspanceProcess(){
     suspanceButton.setVisible(false);

        try {
            List l = getUser();
            Members m = null;
            if (l.size() != 0) {
                m = (Members) l.get(0);
                LedgerHeads lh = Utils.getLedgerHead("Suspense Account");
                String balanceQuery = "select round(ifnull(sum(deposit),0)-ifnull(sum(withdrawal),0),2) from transactions where transactions.lledger_head_id = " + lh.getId() + " and transactions.user_id=" + m.getId();
                Query q = BankingPUEntityManager.createNativeQuery(balanceQuery);
                Double amt = (Double) ((Vector) q.getSingleResult()).get(0);
                int s = JOptionPane.showConfirmDialog(this, "Account balance " + amt.toString() + ". Amount to withdraw:" + amountText.getText() + ". Continue ?");
                if (s == JOptionPane.YES_OPTION) {
                    if (Double.parseDouble(amountText.getText()) > amt) {
                        JOptionPane.showMessageDialog(this, "Sufficent Suspance balance not available", "Error", JOptionPane.ERROR_MESSAGE);
                    } else {
                        fromSuspense = true;
                    }
                }
                if (s == JOptionPane.NO_OPTION) {
                    fromSuspense = false;
                    suspanceButton.setVisible(true);
                }
            //accountBalanceLabel.setText();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField amountText;
    private javax.swing.JComboBox criteriaCombo;
    private javax.swing.JLabel detailsLabel;
    private javax.swing.JLabel installmentDateText;
    private javax.swing.JTextField installmentText;
    private javax.swing.JTextField interestText;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel mdsNameLabel;
    private javax.swing.JTextField pkText;
    private javax.swing.JButton suspanceButton;
    // End of variables declaration//GEN-END:variables
}
